{"ast":null,"code":"var _jsxFileName = \"/Users/louiemonteverde/Documents/inventory-report-final-v2/src/App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { supabase } from \"./supabase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = /*#__PURE__*/React.forwardRef(_c = (props, ref) => /*#__PURE__*/_jsxDEV(\"input\", {\n  ...props,\n  ref: ref,\n  className: `px-2 py-1 rounded border ${props.className || \"border-gray-300\"}`\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this));\n_c2 = Input;\nconst Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  ...props,\n  className: \"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c3 = Button;\nconst handleGenerateMismatchReport = () => {\n  const mismatched = entries.filter(e => e.count !== undefined && e.count !== null && e.count !== e.on_hand);\n  const csvRows = []; // Placeholder array to resolve syntax error\n  // Additional logic to populate csvRows can go here\n};\nconst fetchEntries = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from(\"entries\").select(\"*\").range(0, 9999); // Increased limit to handle more than 1000 rows\n\n  if (error) {\n    console.error(\"Error fetching entries:\", error);\n  } else {\n    setEntries(data);\n  }\n};\n\n// Don't forget to call fetchEntries inside useEffect or wherever you're pulling entry data\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"names":["React","useState","useEffect","useRef","XLSX","jsPDF","supabase","jsxDEV","_jsxDEV","Input","forwardRef","_c","props","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Button","_c3","handleGenerateMismatchReport","mismatched","entries","filter","e","count","undefined","on_hand","csvRows","fetchEntries","data","error","from","select","range","console","setEntries","$RefreshReg$"],"sources":["/Users/louiemonteverde/Documents/inventory-report-final-v2/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { supabase } from \"./supabase\";\n\nconst Input = React.forwardRef((props, ref) => (\n  <input\n    {...props}\n    ref={ref}\n    className={`px-2 py-1 rounded border ${props.className || \"border-gray-300\"}`}\n  />\n));\n\nconst Button = (props) => (\n  <button\n    {...props}\n    className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n  />\n);\n\nconst handleGenerateMismatchReport = () => {\n  const mismatched = entries.filter(\n    (e) => e.count !== undefined && e.count !== null && e.count !== e.on_hand\n  );\n  const csvRows = []; // Placeholder array to resolve syntax error\n  // Additional logic to populate csvRows can go here\n};\n\nconst fetchEntries = async () => {\n  const { data, error } = await supabase\n    .from(\"entries\")\n    .select(\"*\")\n    .range(0, 9999); // Increased limit to handle more than 1000 rows\n\n  if (error) {\n    console.error(\"Error fetching entries:\", error);\n  } else {\n    setEntries(data);\n  }\n};\n\n// Don't forget to call fetchEntries inside useEffect or wherever you're pulling entry data\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,QAAQ,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,KAAK,gBAAGT,KAAK,CAACU,UAAU,CAAAC,EAAA,GAACA,CAACC,KAAK,EAAEC,GAAG,kBACxCL,OAAA;EAAA,GACMI,KAAK;EACTC,GAAG,EAAEA,GAAI;EACTC,SAAS,EAAE,4BAA4BF,KAAK,CAACE,SAAS,IAAI,iBAAiB;AAAG;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC/E,CACF,CAAC;AAACC,GAAA,GANGV,KAAK;AAQX,MAAMW,MAAM,GAAIR,KAAK,iBACnBJ,OAAA;EAAA,GACMI,KAAK;EACTE,SAAS,EAAC;AAA4D;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACvE,CACF;AAACG,GAAA,GALID,MAAM;AAOZ,MAAME,4BAA4B,GAAGA,CAAA,KAAM;EACzC,MAAMC,UAAU,GAAGC,OAAO,CAACC,MAAM,CAC9BC,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKC,SAAS,IAAIF,CAAC,CAACC,KAAK,KAAK,IAAI,IAAID,CAAC,CAACC,KAAK,KAAKD,CAAC,CAACG,OACpE,CAAC;EACD,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;EACpB;AACF,CAAC;AAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAM3B,QAAQ,CACnC4B,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEnB,IAAIH,KAAK,EAAE;IACTI,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD,CAAC,MAAM;IACLK,UAAU,CAACN,IAAI,CAAC;EAClB;AACF,CAAC;;AAED;AAAA,IAAArB,EAAA,EAAAQ,GAAA,EAAAE,GAAA;AAAAkB,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAApB,GAAA;AAAAoB,YAAA,CAAAlB,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}